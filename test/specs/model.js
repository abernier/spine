// Generated by CoffeeScript 1.3.3
(function() {

  describe("Model", function() {
    var Asset;
    Asset = void 0;
    beforeEach(function() {
      return Asset = Spine.Model.setup("Asset", ["name"]);
    });
    it("can create records", function() {
      var asset;
      asset = Asset.create({
        name: "test.pdf"
      });
      return expect(Asset.first()).toEqual(asset);
    });
    it("can update records", function() {
      var asset;
      asset = Asset.create({
        name: "test.pdf"
      });
      expect(Asset.first().name).toEqual("test.pdf");
      asset.name = "wem.pdf";
      asset.save();
      return expect(Asset.first().name).toEqual("wem.pdf");
    });
    it("can destroy records", function() {
      var asset;
      asset = Asset.create({
        name: "test.pdf"
      });
      expect(Asset.first()).toEqual(asset);
      asset.destroy();
      return expect(Asset.first()).toBeFalsy();
    });
    it("can find records", function() {
      var asset;
      asset = Asset.create({
        name: "test.pdf"
      });
      expect(Asset.find(asset.id)).toBeTruthy();
      asset.destroy();
      return expect(function() {
        return Asset.find(asset.id);
      }).toThrow();
    });
    it("can check existence", function() {
      var asset;
      asset = Asset.create({
        name: "test.pdf"
      });
      expect(asset.exists()).toBeTruthy();
      expect(Asset.exists(asset.id)).toBeTruthy();
      asset.destroy();
      expect(asset.exists()).toBeFalsy();
      return expect(Asset.exists(asset.id)).toBeFalsy();
    });
    it("can reload", function() {
      var asset, original;
      asset = Asset.create({
        name: "test.pdf"
      }).dup(false);
      Asset.find(asset.id).updateAttributes({
        name: "foo.pdf"
      });
      expect(asset.name).toEqual("test.pdf");
      original = asset.reload();
      expect(asset.name).toEqual("foo.pdf");
      return expect(original.__proto__.__proto__).toEqual(Asset.prototype);
    });
    it("can select records", function() {
      var asset1, asset2, selected;
      asset1 = Asset.create({
        name: "test.pdf"
      });
      asset2 = Asset.create({
        name: "foo.pdf"
      });
      selected = Asset.select(function(rec) {
        return rec.name === "foo.pdf";
      });
      return expect(selected).toEqual([asset2]);
    });
    it("can return all records", function() {
      var asset1, asset2;
      asset1 = Asset.create({
        name: "test.pdf"
      });
      asset2 = Asset.create({
        name: "foo.pdf"
      });
      return expect(Asset.all()).toEqual([asset1, asset2]);
    });
    it("can find records by attribute", function() {
      var asset, findAll, findOne;
      asset = Asset.create({
        name: "foo.pdf"
      });
      Asset.create({
        name: "test.pdf"
      });
      findOne = Asset.findByAttribute("name", "foo.pdf");
      expect(findOne).toEqual(asset);
      findAll = Asset.findAllByAttribute("name", "foo.pdf");
      return expect(findAll).toEqual([asset]);
    });
    it("can find first/last record", function() {
      var first, last;
      first = Asset.create({
        name: "foo.pdf"
      });
      Asset.create({
        name: "test.pdf"
      });
      last = Asset.create({
        name: "wem.pdf"
      });
      expect(Asset.first()).toEqual(first);
      return expect(Asset.last()).toEqual(last);
    });
    it("can destroy all records", function() {
      Asset.create({
        name: "foo.pdf"
      });
      Asset.create({
        name: "foo.pdf"
      });
      expect(Asset.count()).toEqual(2);
      Asset.destroyAll();
      return expect(Asset.count()).toEqual(0);
    });
    it("can delete all records", function() {
      Asset.create({
        name: "foo.pdf"
      });
      Asset.create({
        name: "foo.pdf"
      });
      expect(Asset.count()).toEqual(2);
      Asset.deleteAll();
      return expect(Asset.count()).toEqual(0);
    });
    it("can be serialized into JSON", function() {
      var asset;
      asset = new Asset({
        name: "Johnson me!"
      });
      return expect(JSON.stringify(asset)).toEqual('{"name":"Johnson me!"}');
    });
    it("can be deserialized from JSON", function() {
      var asset, assets;
      asset = Asset.fromJSON('{"name":"Un-Johnson me!"}');
      expect(asset.name).toEqual("Un-Johnson me!");
      assets = Asset.fromJSON('[{"name":"Un-Johnson me!"}]');
      return expect(assets[0] && assets[0].name).toEqual("Un-Johnson me!");
    });
    it("can be instantiated from a form", function() {
      var asset, form;
      form = $('<form />');
      form.append('<input name="name" value="bar" />');
      asset = Asset.fromForm(form);
      return expect(asset.name).toEqual("bar");
    });
    it("can validate", function() {
      Asset.include({
        validate: function() {
          if (!this.name) {
            return "Name required";
          }
        }
      });
      expect(Asset.create({
        name: ""
      })).toBeFalsy();
      expect(new Asset({
        name: ""
      }).isValid()).toBeFalsy();
      expect(Asset.create({
        name: "Yo big dog"
      })).toBeTruthy();
      return expect(new Asset({
        name: "Yo big dog"
      }).isValid()).toBeTruthy();
    });
    it("validation can be disabled", function() {
      var asset;
      Asset.include({
        validate: function() {
          if (!this.name) {
            return "Name required";
          }
        }
      });
      asset = new Asset;
      expect(asset.save()).toBeFalsy();
      return expect(asset.save({
        validate: false
      })).toBeTruthy();
    });
    it("has attribute hash", function() {
      var asset;
      asset = new Asset({
        name: "wazzzup!"
      });
      return expect(asset.attributes()).toEqual({
        name: "wazzzup!"
      });
    });
    it("attributes() should not return undefined atts", function() {
      var asset;
      asset = new Asset();
      return expect(asset.attributes()).toEqual({});
    });
    it("can load attributes()", function() {
      var asset, result;
      asset = new Asset();
      result = asset.load({
        name: "In da' house"
      });
      expect(result).toBe(asset);
      return expect(asset.name).toEqual("In da' house");
    });
    it("can load() attributes respecting getters/setters", function() {
      var asset;
      Asset.include({
        name: function(value) {
          var _ref;
          return _ref = value.split(' ', 2), this.first_name = _ref[0], this.last_name = _ref[1], _ref;
        }
      });
      asset = new Asset();
      asset.load({
        name: "Alex MacCaw"
      });
      expect(asset.first_name).toEqual("Alex");
      return expect(asset.last_name).toEqual("MacCaw");
    });
    it("attributes() respecting getters/setters", function() {
      var asset;
      Asset.include({
        name: function() {
          return "Bob";
        }
      });
      asset = new Asset();
      return expect(asset.attributes()).toEqual({
        name: "Bob"
      });
    });
    it("can generate ID", function() {
      var asset;
      asset = Asset.create({
        name: "who's in the house?"
      });
      return expect(asset.id).toBeTruthy();
    });
    it("can be duplicated", function() {
      var asset;
      asset = Asset.create({
        name: "who's your daddy?"
      });
      expect(asset.dup().__proto__).toBe(Asset.prototype);
      expect(asset.name).toEqual("who's your daddy?");
      asset.name = "I am your father";
      expect(asset.reload().name).toBe("who's your daddy?");
      return expect(asset).not.toBe(Asset.records[asset.id]);
    });
    it("can be cloned", function() {
      var asset;
      asset = Asset.create({
        name: "what's cooler than cool?"
      }).dup(false);
      expect(asset.clone().__proto__).not.toBe(Asset.prototype);
      expect(asset.clone().__proto__.__proto__).toBe(Asset.prototype);
      expect(asset.name).toEqual("what's cooler than cool?");
      asset.name = "ice cold";
      return expect(asset.reload().name).toBe("what's cooler than cool?");
    });
    it("clones are dynamic", function() {
      var asset, clone;
      asset = Asset.create({
        name: "hotel california"
      });
      clone = Asset.find(asset.id);
      asset.name = "checkout anytime";
      asset.save();
      return expect(clone.name).toEqual("checkout anytime");
    });
    it("create or save should return a clone", function() {
      var asset;
      asset = Asset.create({
        name: "what's cooler than cool?"
      });
      expect(asset.__proto__).not.toBe(Asset.prototype);
      return expect(asset.__proto__.__proto__).toBe(Asset.prototype);
    });
    it("should be able to be subclassed", function() {
      var File;
      Asset.extend({
        aProperty: true
      });
      File = Asset.setup("File");
      expect(File.aProperty).toBeTruthy();
      expect(File.className).toBe("File");
      return expect(File.attributes).toEqual(Asset.attributes);
    });
    it("dup should take a newRecord argument, which controls if a new record is returned", function() {
      var asset;
      asset = Asset.create({
        name: "hotel california"
      });
      expect(asset.dup().id).toBeUndefined();
      expect(asset.dup().isNew()).toBeTruthy();
      expect(asset.dup(false).id).toBe(asset.id);
      return expect(asset.dup(false).newRecord).toBeFalsy();
    });
    it("should be able to change ID", function() {
      var asset;
      asset = Asset.create({
        name: "hotel california"
      });
      expect(asset.id).toBeTruthy();
      asset.changeID("foo");
      expect(asset.id).toBe("foo");
      return expect(Asset.exists("foo")).toBeTruthy();
    });
    it("eql should respect ID changes", function() {
      var asset1, asset2;
      asset1 = Asset.create({
        name: "hotel california",
        id: "bar"
      });
      asset2 = asset1.dup(false);
      asset1.changeID("foo");
      return expect(asset1.eql(asset2)).toBeTruthy();
    });
    it("new records should not be eql", function() {
      var asset1, asset2;
      asset1 = new Asset;
      asset2 = new Asset;
      return expect(asset1.eql(asset2)).not.toBeTruthy();
    });
    it("should generate unique cIDs", function() {
      Asset.refresh({
        name: "Bob",
        id: 3
      });
      Asset.refresh({
        name: "Bob",
        id: 2
      });
      Asset.refresh({
        name: "Bob",
        id: 1
      });
      return expect(Asset.find(2).eql(Asset.find(1))).not.toBeTruthy();
    });
    it("should handle more than 10 cIDs correctly", function() {
      var i, _i;
      for (i = _i = 0; _i < 12; i = ++_i) {
        Asset.refresh({
          name: "Bob",
          id: i
        });
      }
      return expect(Asset.idCounter).toEqual(12);
    });
    return describe("with spy", function() {
      var spy;
      spy = void 0;
      beforeEach(function() {
        var noop;
        noop = {
          spy: function() {}
        };
        spyOn(noop, "spy");
        return spy = noop.spy;
      });
      it("can interate over records", function() {
        var asset1, asset2;
        asset1 = Asset.create({
          name: "test.pdf"
        });
        asset2 = Asset.create({
          name: "foo.pdf"
        });
        Asset.each(spy);
        expect(spy).toHaveBeenCalledWith(asset1);
        return expect(spy).toHaveBeenCalledWith(asset2);
      });
      it("can fire create events", function() {
        var asset;
        Asset.bind("create", spy);
        asset = Asset.create({
          name: "cartoon world.png"
        });
        return expect(spy).toHaveBeenCalledWith(asset, {});
      });
      it("can fire save events", function() {
        var asset;
        Asset.bind("save", spy);
        asset = Asset.create({
          name: "cartoon world.png"
        });
        expect(spy).toHaveBeenCalledWith(asset, {});
        asset.save();
        return expect(spy).toHaveBeenCalled();
      });
      it("can fire update events", function() {
        var asset;
        Asset.bind("update", spy);
        asset = Asset.create({
          name: "cartoon world.png"
        });
        expect(spy).not.toHaveBeenCalledWith(asset);
        asset.save();
        return expect(spy).toHaveBeenCalledWith(asset, {});
      });
      it("can fire destroy events", function() {
        var asset;
        Asset.bind("destroy", spy);
        asset = Asset.create({
          name: "cartoon world.png"
        });
        asset.destroy();
        return expect(spy).toHaveBeenCalledWith(asset, {});
      });
      it("can fire events on record", function() {
        var asset;
        asset = Asset.create({
          name: "cartoon world.png"
        });
        asset.bind("save", spy);
        asset.save();
        return expect(spy).toHaveBeenCalledWith(asset, {});
      });
      it("can fire change events on record", function() {
        var asset;
        Asset.bind("change", spy);
        asset = Asset.create({
          name: "cartoon world.png"
        });
        expect(spy).toHaveBeenCalledWith(asset, "create", {});
        asset.save();
        expect(spy).toHaveBeenCalledWith(asset, "update", {});
        asset.destroy();
        return expect(spy).toHaveBeenCalledWith(asset, "destroy", {});
      });
      it("can fire error events", function() {
        var asset;
        Asset.bind("error", spy);
        Asset.include({
          validate: function() {
            if (!this.name) {
              return "Name required";
            }
          }
        });
        asset = new Asset({
          name: ""
        });
        expect(asset.save()).toBeFalsy();
        return expect(spy).toHaveBeenCalledWith(asset, "Name required");
      });
      it("should be able to bind once", function() {
        var asset;
        Asset.one("save", spy);
        asset = new Asset({
          name: "cartoon world.png"
        });
        asset.save();
        expect(spy).toHaveBeenCalledWith(asset, {});
        spy.reset();
        asset.save();
        return expect(spy).not.toHaveBeenCalled();
      });
      it("should be able to bind once on instance", function() {
        var asset;
        asset = Asset.create({
          name: "cartoon world.png"
        });
        asset.one("save", spy);
        asset.save();
        expect(spy).toHaveBeenCalledWith(asset, {});
        spy.reset();
        asset.save();
        return expect(spy).not.toHaveBeenCalled();
      });
      it("it should pass clones with events", function() {
        var asset;
        Asset.bind("create", function(asset) {
          expect(asset.__proto__).not.toBe(Asset.prototype);
          return expect(asset.__proto__.__proto__).toBe(Asset.prototype);
        });
        Asset.bind("update", function(asset) {
          expect(asset.__proto__).not.toBe(Asset.prototype);
          return expect(asset.__proto__.__proto__).toBe(Asset.prototype);
        });
        asset = Asset.create({
          name: "cartoon world.png"
        });
        return asset.updateAttributes({
          name: "lonely heart.png"
        });
      });
      it("should be able to unbind instance events", function() {
        var asset;
        asset = Asset.create({
          name: "cartoon world.png"
        });
        asset.bind("save", spy);
        asset.unbind();
        asset.save();
        return expect(spy).not.toHaveBeenCalled();
      });
      it("should unbind events on instance destroy", function() {
        var asset;
        asset = Asset.create({
          name: "cartoon world.png"
        });
        asset.bind("save", spy);
        asset.destroy();
        asset.trigger("save", asset);
        return expect(spy).not.toHaveBeenCalled();
      });
      return it("callbacks should still work on ID changes", function() {
        var asset;
        asset = Asset.create({
          name: "hotel california",
          id: "bar"
        });
        asset.bind("test", spy);
        asset.changeID("foo");
        asset = Asset.find("foo");
        asset.trigger("test", asset);
        return expect(spy).toHaveBeenCalled();
      });
    });
  });

}).call(this);
