// Generated by CoffeeScript 1.3.3
(function() {

  describe("Manager", function() {
    var Groups, Users, groups, users;
    Users = void 0;
    Groups = void 0;
    users = void 0;
    groups = void 0;
    beforeEach(function() {
      Users = Spine.Controller.sub();
      Groups = Spine.Controller.sub();
      users = new Users();
      return groups = new Groups();
    });
    it("should toggle active class", function() {
      new Spine.Manager(users, groups);
      groups.active();
      expect(groups.el.hasClass('active')).toBeTruthy();
      expect(users.el.hasClass('active')).not.toBeTruthy();
      users.active();
      expect(groups.el.hasClass('active')).not.toBeTruthy();
      return expect(users.el.hasClass('active')).toBeTruthy();
    });
    it("deactivate should work", function() {
      var manager;
      manager = new Spine.Manager(users, groups);
      users.active();
      manager.deactivate();
      return expect(users.el.hasClass('active')).not.toBeTruthy();
    });
    it("should remove controllers on release event", function() {
      var manager;
      manager = new Spine.Manager(users, groups);
      expect(manager.controllers).toEqual([users, groups]);
      users.release();
      return expect(manager.controllers).toEqual([groups]);
    });
    return describe("with spy", function() {
      var spy;
      spy = void 0;
      beforeEach(function() {
        var noop;
        noop = {
          spy: function() {}
        };
        spyOn(noop, "spy");
        return spy = noop.spy;
      });
      it("should fire active event on controller", function() {
        users.active(spy);
        users.active();
        return expect(spy).toHaveBeenCalled();
      });
      it("should fire change event on manager", function() {
        var manager;
        manager = new Spine.Manager(users, groups);
        manager.bind('change', spy);
        users.active();
        return expect(spy).toHaveBeenCalledWith(users);
      });
      it("should call activate on controller", function() {
        new Spine.Manager(users, groups);
        users.activate = spy;
        users.active(1, 2, 3);
        return expect(users.activate).toHaveBeenCalledWith(1, 2, 3);
      });
      return it("should call deactivate on controller", function() {
        new Spine.Manager(users, groups);
        users.deactivate = spy;
        groups.active(1, 2, 3);
        return expect(users.deactivate).toHaveBeenCalledWith(1, 2, 3);
      });
    });
  });

}).call(this);
