// Generated by CoffeeScript 1.3.3
(function() {

  describe("Ajax", function() {
    var User, jqXHR;
    User = void 0;
    jqXHR = void 0;
    beforeEach(function() {
      Spine.Ajax.requests = [];
      Spine.Ajax.pending = false;
      User = Spine.Model.setup("User", ["first", "last"]);
      User.extend(Spine.Model.Ajax);
      jqXHR = $.Deferred();
      return $.extend(jqXHR, {
        readyState: 0,
        setRequestHeader: function() {
          return this;
        },
        getAllResponseHeaders: function() {},
        getResponseHeader: function() {},
        overrideMimeType: function() {
          return this;
        },
        abort: function() {
          return this;
        },
        success: jqXHR.done,
        error: jqXHR.fail,
        complete: jqXHR.done
      });
    });
    it("can GET a collection on fetch", function() {
      spyOn(jQuery, "ajax").andReturn(jqXHR);
      User.fetch();
      return expect(jQuery.ajax).toHaveBeenCalledWith({
        type: 'GET',
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        },
        contentType: 'application/json',
        dataType: 'json',
        url: '/users',
        processData: false
      });
    });
    it("can GET a record on fetch", function() {
      User.refresh([
        {
          first: "John",
          last: "Williams",
          id: "IDD"
        }
      ]);
      spyOn(jQuery, "ajax").andReturn(jqXHR);
      User.fetch({
        id: "IDD"
      });
      return expect(jQuery.ajax).toHaveBeenCalledWith({
        type: 'GET',
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        },
        contentType: 'application/json',
        dataType: 'json',
        url: '/users/IDD',
        processData: false
      });
    });
    it("can send POST on create", function() {
      spyOn(jQuery, "ajax").andReturn(jqXHR);
      User.create({
        first: "Hans",
        last: "Zimmer",
        id: "IDD"
      });
      return expect(jQuery.ajax).toHaveBeenCalledWith({
        type: 'POST',
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        },
        contentType: 'application/json',
        dataType: 'json',
        data: '{"first":"Hans","last":"Zimmer","id":"IDD"}',
        url: '/users',
        processData: false
      });
    });
    it("can send PUT on update", function() {
      User.refresh([
        {
          first: "John",
          last: "Williams",
          id: "IDD"
        }
      ]);
      spyOn(jQuery, "ajax").andReturn(jqXHR);
      User.first().updateAttributes({
        first: "John2",
        last: "Williams2"
      });
      return expect(jQuery.ajax).toHaveBeenCalledWith({
        type: 'PUT',
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        },
        contentType: 'application/json',
        dataType: 'json',
        data: '{"first":"John2","last":"Williams2","id":"IDD"}',
        url: '/users/IDD',
        processData: false
      });
    });
    it("can send DELETE on destroy", function() {
      User.refresh([
        {
          first: "John",
          last: "Williams",
          id: "IDD"
        }
      ]);
      spyOn(jQuery, "ajax").andReturn(jqXHR);
      User.first().destroy();
      return expect(jQuery.ajax).toHaveBeenCalledWith({
        contentType: 'application/json',
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        },
        dataType: 'json',
        processData: false,
        type: 'DELETE',
        url: '/users/IDD'
      });
    });
    it("can update record after PUT/POST", function() {
      var newAtts;
      spyOn(jQuery, "ajax").andReturn(jqXHR);
      User.create({
        first: "Hans",
        last: "Zimmer",
        id: "IDD"
      });
      newAtts = {
        first: "Hans2",
        last: "Zimmer2",
        id: "IDD"
      };
      jqXHR.resolve(newAtts);
      return expect(User.first().attributes()).toEqual(newAtts);
    });
    it("can change record ID after PUT/POST", function() {
      var newAtts;
      spyOn(jQuery, "ajax").andReturn(jqXHR);
      User.create({
        id: "IDD"
      });
      newAtts = {
        id: "IDD2"
      };
      jqXHR.resolve(newAtts);
      expect(User.first().id).toEqual("IDD2");
      return expect(User.records["IDD2"]).toEqual(User.first());
    });
    it("should send requests syncronously", function() {
      spyOn(jQuery, "ajax").andReturn(jqXHR);
      User.create({
        first: "First"
      });
      expect(jQuery.ajax).toHaveBeenCalled();
      jQuery.ajax.reset();
      User.create({
        first: "Second"
      });
      expect(jQuery.ajax).not.toHaveBeenCalled();
      jqXHR.resolve();
      return expect(jQuery.ajax).toHaveBeenCalled();
    });
    it("should have success callbacks", function() {
      var noop, spy;
      spyOn(jQuery, "ajax").andReturn(jqXHR);
      noop = {
        spy: function() {}
      };
      spyOn(noop, "spy");
      spy = noop.spy;
      User.create({
        first: "Second"
      }, {
        success: spy
      });
      jqXHR.resolve();
      return expect(spy).toHaveBeenCalled();
    });
    it("should have error callbacks", function() {
      var noop, spy;
      spyOn(jQuery, "ajax").andReturn(jqXHR);
      noop = {
        spy: function() {}
      };
      spyOn(noop, "spy");
      spy = noop.spy;
      User.create({
        first: "Second"
      }, {
        error: spy
      });
      jqXHR.reject();
      return expect(spy).toHaveBeenCalled();
    });
    it("can cancel ajax on change", function() {
      spyOn(jQuery, "ajax").andReturn(jqXHR);
      User.create({
        first: "Second"
      }, {
        ajax: false
      });
      jqXHR.resolve();
      return expect(jQuery.ajax).not.toHaveBeenCalled();
    });
    it("should expose the defaults object", function() {
      return expect(Spine.Ajax.defaults).toBeDefined();
    });
    return it("should have a url function", function() {
      var user;
      expect(User.url()).toBe('/users');
      expect(User.url('search')).toBe('/users/search');
      user = new User({
        id: 1
      });
      expect(user.url()).toBe('/users/1');
      expect(user.url('custom')).toBe('/users/1/custom');
      Spine.Model.host = 'http://example.com';
      expect(User.url()).toBe('http://example.com/users');
      return expect(user.url()).toBe('http://example.com/users/1');
    });
  });

}).call(this);
