// Generated by CoffeeScript 1.3.3
(function() {

  describe("Events", function() {
    var EventTest, spy;
    EventTest = void 0;
    spy = void 0;
    beforeEach(function() {
      var noop;
      EventTest = Spine.Class.create();
      EventTest.extend(Spine.Events);
      noop = {
        spy: function() {}
      };
      spyOn(noop, "spy");
      return spy = noop.spy;
    });
    it("can bind/trigger events", function() {
      EventTest.bind("daddyo", spy);
      EventTest.trigger("daddyo");
      return expect(spy).toHaveBeenCalled();
    });
    it("should trigger correct events", function() {
      EventTest.bind("daddyo", spy);
      EventTest.trigger("motherio");
      return expect(spy).not.toHaveBeenCalled();
    });
    it("can bind/trigger multiple events", function() {
      EventTest.bind("house car windows", spy);
      EventTest.trigger("car");
      return expect(spy).toHaveBeenCalled();
    });
    it("can pass data to triggered events", function() {
      EventTest.bind("yoyo", spy);
      EventTest.trigger("yoyo", 5, 10);
      return expect(spy).toHaveBeenCalledWith(5, 10);
    });
    it("can unbind events", function() {
      EventTest.bind("daddyo", spy);
      EventTest.unbind("daddyo");
      EventTest.trigger("daddyo");
      return expect(spy).not.toHaveBeenCalled();
    });
    it("can bind to a single event", function() {
      EventTest.one("indahouse", spy);
      EventTest.trigger("indahouse");
      expect(spy).toHaveBeenCalled();
      spy.reset();
      EventTest.trigger("indahouse");
      return expect(spy).not.toHaveBeenCalled();
    });
    it("should allow a callback unbind itself", function() {
      var a, b, c;
      a = jasmine.createSpy("a");
      b = jasmine.createSpy("b");
      c = jasmine.createSpy("c");
      b.andCallFake(function() {
        return EventTest.unbind("once", b);
      });
      EventTest.bind("once", a);
      EventTest.bind("once", b);
      EventTest.bind("once", c);
      EventTest.trigger("once");
      expect(a).toHaveBeenCalled();
      expect(b).toHaveBeenCalled();
      expect(c).toHaveBeenCalled();
      EventTest.trigger("once");
      expect(a.callCount).toBe(2);
      expect(b.callCount).toBe(1);
      return expect(c.callCount).toBe(2);
    });
    it("can cancel propogation", function() {
      EventTest.bind("motherio", function() {
        return false;
      });
      EventTest.bind("motherio", spy);
      EventTest.trigger("motherio");
      return expect(spy).not.toHaveBeenCalled();
    });
    return it("should clear events on inherited objects", function() {
      var Sub;
      EventTest.bind("yoyo", spy);
      Sub = EventTest.sub();
      Sub.trigger("yoyo");
      return expect(spy).not.toHaveBeenCalled();
    });
  });

}).call(this);
