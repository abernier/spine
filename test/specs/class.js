// Generated by CoffeeScript 1.3.3
(function() {

  describe("Class", function() {
    var User;
    User = void 0;
    beforeEach(function() {
      return User = Spine.Class.create();
    });
    it("is sane", function() {
      return expect(Spine).toBeTruthy();
    });
    it("can create subclasses", function() {
      var Friend;
      User.extend({
        classProperty: true
      });
      Friend = User.create();
      expect(Friend).toBeTruthy();
      return expect(Friend.classProperty).toBeTruthy();
    });
    it("can create instance", function() {
      var Bob;
      User.include({
        instanceProperty: true
      });
      Bob = new User();
      expect(Bob).toBeTruthy();
      return expect(Bob.instanceProperty).toBeTruthy();
    });
    it("can be extendable", function() {
      User.extend({
        classProperty: true
      });
      return expect(User.classProperty).toBeTruthy();
    });
    it("can be includable", function() {
      User.include({
        instanceProperty: true
      });
      expect(User.prototype.instanceProperty).toBeTruthy();
      return expect((new User()).instanceProperty).toBeTruthy();
    });
    it("should trigger module callbacks", function() {
      var module;
      module = {
        included: function() {},
        extended: function() {}
      };
      spyOn(module, "included");
      User.include(module);
      expect(module.included).toHaveBeenCalled();
      spyOn(module, "extended");
      User.extend(module);
      return expect(module.extended).toHaveBeenCalled();
    });
    it("include/extend should raise without arguments", function() {
      expect(function() {
        return User.include();
      }).toThrow();
      return expect(function() {
        return User.extend();
      }).toThrow();
    });
    return it("can proxy functions in class/instance context", function() {
      var func, user;
      func = function() {
        return this;
      };
      expect(User.proxy(func)()).toBe(User);
      user = new User();
      return expect(user.proxy(func)()).toBe(user);
    });
  });

}).call(this);
