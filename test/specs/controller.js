// Generated by CoffeeScript 1.3.3
(function() {

  describe("Controller", function() {
    var Users, element;
    Users = void 0;
    element = void 0;
    beforeEach(function() {
      Users = Spine.Controller.sub();
      return element = $("<div />");
    });
    it("should be configurable", function() {
      var users;
      element.addClass("testy");
      users = new Users({
        el: element
      });
      expect(users.el.hasClass("testy")).toBeTruthy();
      users = new Users({
        item: "foo"
      });
      return expect(users.item).toEqual("foo");
    });
    it("should generate element", function() {
      var users;
      users = new Users();
      return expect(users.el).toBeTruthy();
    });
    it("can populate elements", function() {
      var users;
      Users.include({
        elements: {
          ".foo": "foo"
        }
      });
      element.append($("<div />").addClass("foo"));
      users = new Users({
        el: element
      });
      expect(users.foo).toBeTruthy();
      return expect(users.foo.hasClass("foo")).toBeTruthy();
    });
    it("can remove element upon release event", function() {
      var parent, users;
      parent = $('<div />');
      parent.append(element);
      users = new Users({
        el: element
      });
      expect(parent.children().length).toBe(1);
      users.release();
      return expect(parent.children().length).toBe(0);
    });
    describe("with spy", function() {
      var spy;
      spy = void 0;
      beforeEach(function() {
        var noop;
        noop = {
          spy: function() {}
        };
        spyOn(noop, "spy");
        return spy = noop.spy;
      });
      it("can add events", function() {
        var users;
        Users.include({
          events: {
            "click": "wasClicked"
          },
          wasClicked: $.proxy(spy, jasmine)
        });
        users = new Users({
          el: element
        });
        element.click();
        return expect(spy).toHaveBeenCalled();
      });
      return it("can delegate events", function() {
        var child, users;
        Users.include({
          events: {
            "click .foo": "wasClicked"
          },
          wasClicked: $.proxy(spy, jasmine)
        });
        child = $("<div />").addClass("foo");
        element.append(child);
        users = new Users({
          el: element
        });
        child.click();
        return expect(spy).toHaveBeenCalled();
      });
    });
    return it("can set attributes on el", function() {
      var users;
      Users.include({
        attributes: {
          "style": "width: 100%"
        }
      });
      users = new Users();
      return expect(users.el.attr("style")).toEqual("width: 100%");
    });
  });

}).call(this);
